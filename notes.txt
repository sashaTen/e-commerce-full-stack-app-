..this  is    notes   file
..django    docs  is   indded   a  very  good   source  for  learning :
..https://docs.djangoproject.com/en/5.0/#index-first-steps
..the  key  to    growth   is   constant   learning 
..if  i  had  to  start   over   i  would   learn  it    like  that : 
i  watch the    video   and  it  says  that   i  have to  know the  basics of 
the   hhtml    i  would    take  crash  course  on  it.   so  remember abouth the   patience .

..learn  the   git   later .




.....
.i  created   the  app   
.added app  to   installed   apps 
.added the  views 
.added the  template  
.created  app  url   file 
.  add   urls   with  inlude to  global  url
.dont  forget  to   include the  models i nto  admin  site 



....
..how   to   create  users   
..   create  forms  .
and   then   import    forms from   sjango 
.usercreation  form 
.from    models  imort   user 
..class   Sighnup use r 
model   
fields .
. from   forms  import    form  to  views 
.  create  function    in  views 
. create   template   
<form></form>   with   method   post

.  pass  the   form  into the   template
.create   url  for the   form 
. create  url  for the  Sighnup   in    base   template

.  if   method    post   in  veiews 
if   form  is   valid  then   save  it   and  create   user 




...    study   about the  user registrations   



...how to   create the     login    function    : 
..   you  need to   create the    form in  forms .py   for  login  view   
..   then   you  create  view  function   which   is  
called  by the   url  login  and  then   it checks   if   POST   info 
in the   form  ==  exisiting    user and then    decides  to  
authenticate   or   not 0
..  lastly   you  create    template
...  also   you  can  control the    authentication    .  the   login  ined  
users   can    do  and   cant ..



.......how to   add  items   :
..you  create   forms    :
    from    django   import   forms 
    from  .models   import   Item


    class  NewItemForm(forms.ModelForm):
        class   Meta :
            model =  Item
            fields  =  ('category' ,   'name' ,  'description' ,   'image' ,     'price')


.  then  in  views   you  create the  function   for  it  .  also   include    
the requirenment   of  user  to  be   looged   in. 


..@login_required
def    new(request):
    if request.method ==  'POST' :
        form =   NewItemForm(request.POST ,  request.FILES)
        if  form.is_valid():
            item = form.save(commit=False)
            item.created_by   =  request.user
            item.save()
            return  redirect('detail'  ,  pk=item.id)
    form   =   NewItemForm
    return   render(request ,    'form.html' ,  {'form' : form})



...then    ofcourse   you  create  the  template   
...  also     provide the    urls

...created     app   dashboard   :
.   startapp
.   add to  setttings 
.  then  in order to   validate  you  create  trinity  :
url   vies   template
.  add url  to    main  urls



......delete  function   : 
. add  url   to  template  <a href="{% url 'delete' item.id %}" > Delete </a>
. create   view  :

def detail(request, pk):
    item = get_object_or_404(Item, pk=pk)
    return render(request, 'detail.html', {'item': item})



...url   path 
  path('<int:pk>/delete/', delete, name='delete'),




........how to   allow   users to   edit   item :
. create  form  that  works  with   model  you   need 
. create   views  function  that   finds   item and  calls the   
form  to    edit 
.  create   url   path   for  it   
.  create  url   in   template
.   url   in   template    gets the  item's   id   
and  goes  to   special  url   
 then  it  gives   that   special url the   id  and  then 
 that  special  url    calls  view  function  and   passes   id  to   it 
 
.....how    to  build the   search   : 
the   url   pattern   "search "
calls the  function   in  views   which 
then   gets   input    query from the search  form 
and then   finds    object  of item  based  on   query   from  form
then   you  put  it   in  context   of  template
and    thats  it ...  



....now the    category   page    shows   items    
that   belong to   that    category:
..  url   href    refers  to   name  of   function 
..  in  views   
items =     item.bojects .filter(caategory   =  category_object)
then   pass  to   template 




....add links   for  search  and  dashboard
ffffff